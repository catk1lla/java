#include <stdio.h>
#include <string.h>
#include <stdlib.h>  // Используем stdlib.h вместо malloc.h
#include <stdbool.h>
#include <locale.h>

// Функция сравнения строк
int strcmp_my(char* f, char* s) {
    while (*f != '\0' && *s != '\0') {
        if (*f > *s) return 1;
        else if (*f < *s) return 2;
        f++;
        s++;
    }

    return (*f == '\0') ? 1 : 2;
}

// Функция сортировки строк (пузырьковая сортировка)
void sort_strings(char** ss, int count) {
    for (int i = 0; i < count; i++) {
        for (int j = 0; j < count - i - 1; j++) {
            if (strcmp_my(ss[j], ss[j + 1]) == 1) {
                char* tmp = ss[j];
                ss[j] = ss[j + 1];
                ss[j + 1] = tmp;
            }
        }
    }
}

// Функция для динамического чтения строки
char* read_line() {
    size_t size = 0;
    size_t capacity = 16; // Начальная емкость
    char* buffer = malloc(capacity);
    if (!buffer) {
        return NULL;
    }

    int c;
    while ((c = getchar()) != '\n' && c != EOF) {
        if (size + 1 >= capacity) {
            capacity *= 2;
            char* temp = realloc(buffer, capacity);
            if (!temp) {
                free(buffer);
                return NULL;
            }
            buffer = temp;
        }
        buffer[size++] = c;
    }
    buffer[size] = '\0';

    // Опционально уменьшаем буфер до нужного размера
    char* final_buffer = realloc(buffer, size + 1);
    if (final_buffer) {
        buffer = final_buffer;
    }

    return buffer;
}

int main() {
    setlocale(LC_ALL, "Rus");
    char** strings = NULL;
    char* line;
    int stringsCount = 0;
    int stringsCapacity = 10; // Начальная емкость для количества строк

    // Инициализируем массив строк
    strings = calloc(stringsCapacity, sizeof(char*));
    if (strings == NULL) {
        printf("Ошибка выделения памяти\n");
        return 1;
    }

    printf("Введите строки, если хотите остановиться введите пустую строку\n");
    while (true) {
        line = read_line();
        if (line == NULL) {
            printf("Ошибка выделения памяти\n");
            break;
        }

        if (strlen(line) == 0) {
            free(line);
            break;
        }

        // Добавляем строку в массив
        if (stringsCount >= stringsCapacity) {
            stringsCapacity *= 2;
            char** temp = realloc(strings, stringsCapacity * sizeof(char*));
            if (temp == NULL) {
                printf("Ошибка выделения памяти\n");
                free(line);
                break;
            }
            strings = temp;
        }

        strings[stringsCount++] = line;
    }

    printf("\nИсходный текст: \n");
    for (int i = 0; i < stringsCount; i++)
        printf("%s\n", strings[i]);

    // Сортируем строки
    sort_strings(strings, stringsCount);

    printf("\nОтсортированный текст: \n");
    for (int i = 0; i < stringsCount; i++) {
        printf("%s\n", strings[i]);
        free(strings[i]); // Освобождаем память каждой строки
    }

    free(strings); // Освобождаем память массива строк
    return 0;
}